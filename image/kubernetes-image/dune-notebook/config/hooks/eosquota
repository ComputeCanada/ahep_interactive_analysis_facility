#!/bin/bash -

export LC_ALL=$(locale -a|grep -ix 'c.utf-\?8' || echo C)

##########################################################################
#                                                                        #
# eosquota - Display user's EOS quota in a more readable format          #
#                                                                        #
##########################################################################

##########################################################################
#                                                                        #
# human_readable - return human readable (MB, GB, etc) for large numbers #
#                                                                        #
##########################################################################
human_readable() {

    units="si"
    size=$1
    prec=2

    if [ $units == "si" ] ; then
        hval=('B' 'KB' 'MB' 'GB' 'TB' 'PB')
        unitdiv=1000
    else
        hval=('B' 'KiB' 'MiB' 'GiB' 'TiB' 'PiB')
        unitdiv=1024
    fi

    # Pretty simple really. Keep dividing by 1000 or 1024 until the size is less
    # than 1000 (or 1024) or we have divided five times which means we've gotten
    # to PB or PiB. Keep track of the number of divisions so that can be used as
    # an index into the unit array

    hvalidx=0
    while [ $size -gt $unitdiv ] && [ $hvalidx -lt 5 ] ; do
        ((hvalidx += 1))
        size=$((size / unitdiv))
    done

    div=$(echo "$unitdiv^$hvalidx" | bc)

    printf "%.${prec}f %s\n" $(echo "scale=5;$1/$div" | bc) "${hval[$hvalidx]}"
}

box_out() {
    nodelen=${#1}
    boxsize=$((nodelen+=3))
    hbox=$(printf '%*s' $boxsize '')
    echo -e "\x1b(0\x6c${hbox// /\x71}\x6b\x1b(B"
    echo -e "\x1b(0\x78\x1b(B ${1}  \x1b(0\x78\x1b(B"
    echo -e "\x1b(0\x6d${hbox// /\x71}\x6a\x1b(B"
} 

# usage() {
#     echo "Usage: eosquota.sh [-h] [-g GROUP]"
#     echo
#     echo "optional arguments:"
#     echo -e "  -h\t\tShow this help message"
#     echo -e "  -g GROUP\tdisplay group quota for given group name"
# }

usage() {
# Usage is relative to use in dual alises "eosquota and eosgrpquota"
    echo "Usage:"
    echo -e "\teosquota\t\tGet quota for your userid"
    echo -e "\teosgrpquota GRPNAME\tGet quota for eos group GRPNAME"
    echo
}

eosinst="root://cmseos.fnal.gov"
username=`whoami`

while getopts ":hg:" opt; do
    case "${opt}" in
        g)
            # we assume a group will have more than 2 characters
            qgroup=${OPTARG}
            if [ ${#qgroup} -lt 3 ] ; then
                usage
                exit 2
            fi
            if [ ! -d /eos/uscms/store/user/${qgroup} ] ; then
                echo "Group ${qgroup} does not exist or has no EOS directory."
                exit 2
            fi
            ;;
        h)
            usage
            exit 1
            ;;
        ?)
            usage
            exit 1
            ;;
    esac
done
shift $((OPTIND-1))

if [ ! -x /usr/bin/eos ]; then
    echo "/usr/bin/eos is not installed"
    exit -1
fi

if [ $qgroup ] ; then
    EOSOUTPUT=`/usr/bin/eos $eosinst quota -m /eos/uscms/store/user/${qgroup} | grep -w $qgroup`
else
    if [ $# -gt 0 ] ; then
        usage
        exit 3
    fi
    EOSOUTPUT=`/usr/bin/eos $eosinst quota -m /eos/uscms/store/user/ | grep -w $username`
fi

if [ -z "${EOSOUTPUT}" ] ; then
  exit 0
fi

while read -r LINE; do
    QVALS=(`echo $LINE`)
    qid=`echo ${QVALS[1]} | cut -d'=' -f2`
    qnode=`echo ${QVALS[2]} | cut -d'=' -f2`
    qusedbytes=`echo ${QVALS[3]} | cut -d'=' -f2`
    qusedlogicalbytes=`echo ${QVALS[4]} | cut -d'=' -f2`
    qusedfiles=`echo ${QVALS[5]} | cut -d'=' -f2`
    qmaxbytes=`echo ${QVALS[6]} | cut -d'=' -f2`
    qmaxlogicalbytes=`echo ${QVALS[7]} | cut -d'=' -f2`
    qmaxfiles=`echo ${QVALS[8]} | cut -d'=' -f2`
    qpctusedbytes=`echo ${QVALS[9]} | cut -d'=' -f2`
    qstatusbytes=`echo ${QVALS[10]} | cut -d'=' -f2`
    qstatusfiles=`echo ${QVALS[11]} | cut -d'=' -f2`
    
    quota_used=`human_readable $qusedlogicalbytes`
    quota_max=`human_readable $qmaxlogicalbytes`
    status_line=`echo ${qstatusbytes}/${qstatusfiles}`

    box_out "Quota Node ==> $qnode"
    if [ ! $qgroup ] ; then
        printf "%-12s %12s %12s %12s %12s %9s %18s\n" "User" "Used Space" "Used Files" "Avail Space" "Avail Files" "% Used" "Space/Files"
    else
        printf "%-12s %12s %12s %12s %12s %9s %18s\n" "Group" "Used Space" "Used Files" "Avail Space" "Avail Files" "% Used" "Space/Files"
    fi
    printf "%-12s %12s %12d %12s %12d %8s%% %18s\n" "$qid" "$quota_used" "$qusedfiles" "$quota_max" "$qmaxfiles" "$qpctusedbytes" "$status_line"
done <<< "$EOSOUTPUT"

